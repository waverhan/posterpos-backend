import axios from 'axios'

// Viber Bot configuration
const VIBER_BOT_TOKEN = process.env.VIBER_BOT_TOKEN || ''
const VIBER_API_URL = 'https://chatapi.viber.com/pa/send_message'

class ViberService {
  constructor() {
    this.botToken = VIBER_BOT_TOKEN
    this.apiUrl = VIBER_API_URL
  }

  /**
   * Send a text message to a Viber user
   */
  async sendMessage(receiverId, text, keyboard = null) {
    if (!this.botToken) {
      console.warn('‚ö†Ô∏è Viber bot token not configured')
      return { success: false, error: 'Bot token not configured' }
    }

    try {
      const payload = {
        receiver: receiverId,
        type: 'text',
        text: text
      }

      // Add keyboard if provided
      if (keyboard) {
        payload.keyboard = keyboard
      }

      const response = await axios.post(this.apiUrl, payload, {
        headers: {
          'Content-Type': 'application/json',
          'X-Viber-Auth-Token': this.botToken
        }
      })

      
      return { success: true, data: response.data }

    } catch (error) {
      console.error('‚ùå Failed to send Viber message:', error.response?.data || error.message)
      return { 
        success: false, 
        error: error.response?.data || error.message 
      }
    }
  }

  /**
   * Send order confirmation to customer via Viber
   */
  async sendOrderConfirmation(order) {
    if (!order.customer_phone) {
      
      return { success: false, error: 'No phone number' }
    }

    // Convert phone number to Viber format (remove + and spaces)
    const viberReceiver = order.customer_phone.replace(/[\s\+\-\(\)]/g, '')

    // Generate order confirmation message
    const message = this.generateOrderConfirmationMessage(order)

    // Create keyboard with useful buttons
    const keyboard = {
      Type: 'keyboard',
      Buttons: [
        {
          Text: 'üìû –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏',
          ActionType: 'open-url',
          ActionBody: 'viber://chat?number=%2B380973244668',
          BgColor: '#2563eb',
          TextColor: '#ffffff'
        },
        {
          Text: 'üåê –ù–∞—à —Å–∞–π—Ç',
          ActionType: 'open-url', 
          ActionBody: 'https://opillia.com.ua',
          BgColor: '#64748b',
          TextColor: '#ffffff'
        }
      ]
    }

    return await this.sendMessage(viberReceiver, message, keyboard)
  }

  /**
   * Send order status update to customer via Viber
   */
  async sendOrderStatusUpdate(order, newStatus) {
    if (!order.customer_phone) {
      
      return { success: false, error: 'No phone number' }
    }

    const viberReceiver = order.customer_phone.replace(/[\s\+\-\(\)]/g, '')
    const message = this.generateStatusUpdateMessage(order, newStatus)

    return await this.sendMessage(viberReceiver, message)
  }

  /**
   * Generate order confirmation message text
   */
  generateOrderConfirmationMessage(order) {
    const deliveryInfo = order.delivery_method === 'delivery'
      ? `üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: ${order.delivery_address}`
      : `üè™ –°–∞–º–æ–≤–∏–≤—ñ–∑ –∑ –º–∞–≥–∞–∑–∏–Ω—É: ${order.pickup_branch?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}`

    const itemsList = order.items.map(item => 
      `‚Ä¢ ${item.name} - ${item.quantity} —à—Ç. √ó ${item.price.toFixed(2)} UAH`
    ).join('\n')

    const estimatedTime = order.estimated_delivery
      ? new Date(order.estimated_delivery).toLocaleString('uk-UA', {
          day: '2-digit',
          month: '2-digit', 
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        })
      : '–£—Ç–æ—á–Ω—é—î—Ç—å—Å—è'

    return `
üéâ –í—ñ—Ç–∞—î–º–æ, ${order.customer_name}!

–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${order.order_number} —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ.

üì¶ –¢–û–í–ê–†–ò:
${itemsList}

üí∞ –ü–Ü–î–°–£–ú–û–ö:
–°—É–º–∞ —Ç–æ–≤–∞—Ä—ñ–≤: ${order.subtotal.toFixed(2)} UAH
–î–æ—Å—Ç–∞–≤–∫–∞: ${order.delivery_fee.toFixed(2)} UAH
üí≥ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${order.total.toFixed(2)} UAH

üöÄ –î–û–°–¢–ê–í–ö–ê:
${deliveryInfo}
‚è∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å: ${estimatedTime}

üíµ –û–ü–õ–ê–¢–ê: –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ

${order.notes ? `üìù –ö–û–ú–ï–ù–¢–ê–†: ${order.notes}\n` : ''}

–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.

–ó –ø–æ–≤–∞–≥–æ—é,
–ö–æ–º–∞–Ω–¥–∞ –û–ø—ñ–ª–ª—è üç∫

üìû +38 (097) 324 46 68
‚úâÔ∏è info@opillia.com.ua
    `.trim()
  }

  /**
   * Generate status update message text
   */
  generateStatusUpdateMessage(order, newStatus) {
    const statusMessages = {
      'confirmed': '‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —ñ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –æ–±—Ä–æ–±–∫—É',
      'preparing': 'üë®‚Äçüç≥ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç—É—î—Ç—å—Å—è',
      'ready': 'üéâ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ –¥–æ –≤–∏–¥–∞—á—ñ!',
      'out_for_delivery': 'üöö –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –¥–æ—Ä–æ–∑—ñ',
      'delivered': '‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!',
      'cancelled': '‚ùå –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ'
    }

    const statusText = statusMessages[newStatus] || `–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${newStatus}`

    return `
üì± –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${order.order_number}

${statusText}

${newStatus === 'ready' && order.delivery_method === 'pickup' ? 
  `üè™ –ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –º–∞–≥–∞–∑–∏–Ω—É: ${order.pickup_branch?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}` : ''}

${newStatus === 'delivered' ? 
  `üåü –ë—É–¥–µ–º–æ –≤–¥—è—á–Ω—ñ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫ –ø—Ä–æ —è–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è!` : ''}

üìû +38 (097) 324 46 68
‚úâÔ∏è info@opillia.com.ua
    `.trim()
  }
}

// Export singleton instance
export const viberService = new ViberService()

// Export function for easy import
export async function sendViberOrderNotification(order) {
  return await viberService.sendOrderConfirmation(order)
}

export async function sendViberStatusUpdate(order, newStatus) {
  return await viberService.sendOrderStatusUpdate(order, newStatus)
}
